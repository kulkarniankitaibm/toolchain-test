---
stages:
- name: Build CLAMAV
  inputs:
  - service: ${SAMPLE_REPO}
    type: git
    branch: master
    dir_name: null
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    COMMAND: "#!/bin/bash\n\n# The following colors have been defined to help with\
      \ presentation of logs: green, red, label_color, no_color.  \nlog_and_echo \"\
      $LABEL\" \"Starting build script\"\n\n# The IBM Container BM Containers plug-in\
      \ (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.\n\
      # Based on the organization and space selected in the Job credentials are in\
      \ place for both IBM Container Service and IBM Bluemix \n#####################\n\
      # Run unit tests    #\n#####################\nlog_and_echo \"$LABEL\" \"No unit\
      \ tests cases have been checked in\"\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      \n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n# FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      \n\n//customization \n// IMAGE_NAME=<image name of deployment:version>, so that\
      \ image does not need to be built each time \necho \"IMAGE_NAME=registry.ng.bluemix.net/phdpx/clamav:latest\"\
      \ >> $ARCHIVE_DIR/build.properties"
    IMAGE_NAME: clamav-devops
    USE_CACHED_LAYERS: 'true'
- name: Deploy ClamAV
  inputs:
  - type: job
    stage: Build CLAMAV
    job: Build
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: "#!/bin/bash\n\nexport EXT_DIR=$(pwd)\nsudo apt-get -y install apt-transport-https\
      \ ca-certificates &> $EXT_DIR/dockerinst.out\n    sudo apt-key adv --keyserver\
      \ hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\
      \ &>> $EXT_DIR/dockerinst.out\n    sudo add-apt-repository \"deb https://apt.dockerproject.org/repo\
      \ ubuntu-precise main\" &>> $EXT_DIR/dockerinst.out\necho \"here\"\n    sudo\
      \ apt-get update &>> $EXT_DIR/dockerinst.out\n    sudo apt-get -y install docker-engine\
      \ &>> $EXT_DIR/dockerinst.out\nif [ -f $EXT_DIR/utilities/cfic826.tgz ]; then\n\
      \        tar zxf $EXT_DIR/utilities/cfic826.tgz\n    else\n        wget https://static-ice.ng.bluemix.net/ibm-containers-linux_x64\
      \ &> /dev/null\n    fi\n    chmod 755 $EXT_DIR/ibm-containers-linux_x64\n  \
      \   echo \"Installing IBM Containers plugin (cf ic)\"\n     cf install-plugin\
      \ -f $EXT_DIR/ibm-containers-linux_x64 &> /dev/null\ncf ic init\n\nsource build.properties\
      \ \ncf ic run -p 3310 --name ${CF_APP} $IMAGE_NAME "
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
